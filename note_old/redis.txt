NoSQL:not only sql。非关系性数据库；解决大规模的数据集合带来的难题，尤其是大数据应用难题。
		nosql的产品：key-value形式；列储存数据库，文档性的数据库，图形数据库，
		易扩展，大数据流量，高性能，灵活的数据模型，高可用。
Redis:是一个高性能的key-value的数据库，支持数据的持久化，提供不同类型的数据结构存储，支持数据备份。
		支持以下类型：字符型，散列型，列表型list，集合型set，有序集合型sort set。
		
		Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。
		Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。

		Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。
		同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。

	使用redis的目的是：
	

		linux下安装redis:
			$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz
			$ tar xzf redis-2.8.17.tar.gz
			$ cd redis-2.8.17
			$ make
			make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：

			下面启动redis服务.

				$ cd src
				$ ./redis-server
				注意这种方式启动redis 使用的是默认配置。也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。

				$ cd src
				$ ./redis-server ../redis.conf
				redis.conf 是一个默认的配置文件。我们可以根据需要使用自己的配置文件。

			启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如：

				$ cd src
				$ ./redis-cli
				redis> set foo bar
				OK
				redis> get foo
				"bar"
			Ubuntu 下安装
				在 Ubuntu 系统安装 Redis 可以使用以下命令:

				$sudo apt-get update
				$sudo apt-get install redis-server
				启动 Redis
				$ redis-server
				查看 redis 是否启动？
				$ redis-cli
				以上命令将打开以下终端：
				redis 127.0.0.1:6379>
				127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。

				redis 127.0.0.1:6379> ping
				PONG
				以上说明我们已经成功安装了redis。
				cahkan redis的配置项：
					获取全部的配置项CONFIG get *
					edis.conf 配置项说明如下：

					1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程
					    daemonize no
					2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定
					    pidfile /var/run/redis.pid
					3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字
					    port 6379

					4. 绑定的主机地址：bind 127.0.0.1

					5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能
					    timeout 300
					6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose	
						 loglevel verbose
					7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null
					    logfile stdout
					8. 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id
					    databases 16
					9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合
					    save <seconds> <changes>
					    Redis默认配置文件中提供了三个条件：
					    save 900 1
					    save 300 10
					    save 60 10000
					    分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。
					10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大
					    rdbcompression yes

					11. 指定本地数据库文件名，默认值为dump.rdb

					    dbfilename dump.rdb

					12. 指定本地数据库存放目录   dir ./

					13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步

					    slaveof <masterip> <masterport>

					14. 当master服务设置了密码保护时，slav服务连接master的密码

					    masterauth <master-password>

					15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭
					    requirepass foobared

					16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息
					    maxclients 128
					17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区

					    maxmemory <bytes>

					18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no

					    appendonly no

					19. 指定更新日志文件名，默认为appendonly.aof

					     appendfilename appendonly.aof

					20. 指定更新日志条件，共有3个可选值： 
					    no：表示等操作系统进行数据缓存同步到磁盘（快） 
					    always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） 
					    everysec：表示每秒同步一次（折中，默认值）
					    appendfsync everysec
					21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）
					     vm-enabled no
					22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享

					     vm-swap-file /tmp/redis.swap

					23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0
					     vm-max-memory 0
					24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值
					     vm-page-size 32
					25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。
					     vm-pages 134217728
					26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4
					     vm-max-threads 4
					27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启
					    glueoutputbuf yes
					28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法
					    hash-max-zipmap-entries 64
					    hash-max-zipmap-value 512
					29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）
					    activerehashing yes
					30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件
					    include /path/to/local.conf
		删除redis:
						1. 卸载软件
						apt-get remove redis
						2. 清除配置
						apt-get remove --purge redis
						3. 删除残留文件
						find / -name redis
						--一般设置如下
						rm -rf var/lib/redis/
						rm -rf /var/log/redis
						rm -rf /etc/redis/
						rm -rf /usr/bin/redis-*
			使用数据类型：
				String字符串：
					redis的String可以包含任何的数据类型如jpg,序列化队形
					 set name "lkl" 
					 get name 可以获得刚输入的值
				Hash:是一个键值对key->value 集合
					 HMSet myhash field1 "hello" filed2 "redis"
					 获取设置的值：HGET myhash field1    输出的结果为hello
					场景：存储，读取，修改，用户属性，
				List（列表）
					Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。
					实例
						redis 127.0.0.1:6379> lpush runoob redis
						(integer) 1
						redis 127.0.0.1:6379> lpush runoob mongodb
						(integer) 2
						redis 127.0.0.1:6379> lpush runoob rabitmq
						(integer) 3
						redis 127.0.0.1:6379> lrange runoob 0 10
						1) "rabitmq"
						2) "mongodb"
						3) "redis"
						redis 127.0.0.1:6379>
					列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。
						场景：最新消息排行等功能(比如朋友圈的时间线) 2,消息队列
			Set（集合）Redis的Set是string类型的无序集合。
					集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。
					sadd 命令
					添加一个 string 元素到 key 对应的 set 集合中，成功返回1，如果元素已经在集合中返回 0，如果 key 对应的 set 不存在则返回错误。
					sadd key member
					实例
						redis 127.0.0.1:6379> sadd runoob redis
						(integer) 1
						redis 127.0.0.1:6379> sadd runoob mongodb
						(integer) 1
						redis 127.0.0.1:6379> sadd runoob rabitmq
						(integer) 1
						redis 127.0.0.1:6379> sadd runoob rabitmq
						(integer) 0
						redis 127.0.0.1:6379> smembers runoob

						1) "redis"
						2) "rabitmq"
						3) "mongodb"
					注意：以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。

					集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储40多亿个成员)。
					1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐
			zset(sorted set：有序集合)
					Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。
					不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。
					zset的成员是唯一的,但分数(score)却可以重复。
					zadd 命令
					添加元素到集合，元素在集合中存在则更新对应score
					zadd key score member 
						实例
						redis 127.0.0.1:6379> zadd runoob 0 redis
						(integer) 1
						redis 127.0.0.1:6379> zadd runoob 0 mongodb
						(integer) 1
						redis 127.0.0.1:6379> zadd runoob 0 rabitmq
						(integer) 1
						redis 127.0.0.1:6379> zadd runoob 0 rabitmq
						(integer) 0
						redis 127.0.0.1:6379> > ZRANGEBYSCORE runoob 0 1000
						1) "mongodb"
						2) "rabitmq"
						3) "redis"
					1、排行榜 2、带权重的消息队列
						
			打开redis的客户端使用：
					redis-cli:
					redis 127.0.0.1:6379>ping ,检测是否启动redis

		如果需要在远程 redis 服务上执行命令，同样我们使用的也是 redis-cli 命令。
			语法
				$ redis-cli -h host -p port -a password
			 例如：
				$redis-cli -h 127.0.0.1 -p 6379 -a "mypass"
				redis 127.0.0.1:6379>
				redis 127.0.0.1:6379> PING

		redis key的命令的使用：
			Del key：用于删除key
			DUMP key：序列化key
			EXISTS  key :检查key是否存在
			EXPIRE key   seconds: 为key设置过期时间，以秒计
			EXPIRE key   timestamp: 为key设置过期时间  接受的unix的时间戳
			EXPIREAT  key millseconds:设置key的过期时间
			PEXPIREAT key milliseconds-timestamp 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计
			KEYS pattern 查找所有符合给定模式( pattern)的 key 。
			MOVE key db 将当前数据库的 key 移动到给定的数据库 db 当中。
			PERSIST key 移除 key 的过期时间，key 将持久保持。
			PTTL key 以毫秒为单位返回 key 的剩余的过期时间。
			TTL key 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。
			RANDOMKEY 从当前数据库中随机返回一个 key 。
			RENAME key newkey 修改 key 的名称
			RENAMENX key newkey 仅当 newkey 不存在时，将 key 改名为 newkey 。
			TYPE key 返回 key 所储存的值的类型。
		String 字符串常用的命令：
			set key value :设置指定的key的值
			get key：获得指定的key
			getRANGE key start end 返回key中的字符串值
			GETSET key value 将指定的key设置value 返回key的旧值
			MGET key1[key2] 获取一个或多个给定的key值
			SETNX key vlue 只有key不存在时
			SETRANGE key offset value用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。
			STRLEN key：返回 key 所储存的字符串值的长度。
			MSET key value [key value ...]：同时设置一个或多个 key-value 对。
			MSETNX key value [key value ...] ：同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。
			PSETEX key milliseconds value：这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。
			INCR key：将 key 中储存的数字值增一。
			INCRBY key increment ：将 key 所储存的值加上给定的增量值（increment） 。
			INCRBYFLOAT key increment：将 key 所储存的值加上给定的浮点增量值（increment） 。
			DECR key ：将 key 中储存的数字值减一。
			DECRBY key decrement  ： key 所储存的值减去给定的减量值（decrement） 。
			APPEND key value：如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。
		Hash:
			Redis hash 命令
			下表列出了 redis hash 基本的相关命令：
			序号	命令及描述
			1	HDEL key field1 [field2] 删除一个或多个哈希表字段
			2	HEXISTS key field 查看哈希表 key 中，指定的字段是否存在。
			3	HGET key field 获取存储在哈希表中指定字段的值。
			4	HGETALL key 获取在哈希表中指定 key 的所有字段和值
			5	HINCRBY key field increment 为哈希表 key 中的指定字段的整数值加上增量 increment 。
			6	HINCRBYFLOAT key field increment 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。
			7	HKEYS key 获取所有哈希表中的字段
			8	HLEN key 获取哈希表中字段的数量
			9	HMGET key field1 [field2] 获取所有给定字段的值
			10	HMSET key field1 value1 [field2 value2 ] 同时将多个 field-value (域-值)对设置到哈希表 key 中。
			11	HSET key field value 将哈希表 key 中的字段 field 的值设为 value 。
			12	HSETNX key field value 只有在字段 field 不存在时，设置哈希表字段的值。
			13	HVALS key 获取哈希表中所有值
			14	HSCAN key cursor [MATCH pattern] [COUNT count] 迭代哈希表中的键值对。
			edis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。
			在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。
			但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。
				1    PFADD key element [element ...] 
				添加指定元素到 HyperLogLog 中。
				2	PFCOUNT key [key ...] 
				返回给定 HyperLogLog 的基数估算值。
				3	PFMERGE destkey sourcekey [sourcekey ...] 
				将多个 HyperLogLog 合并为一个 HyperLogLog
		
			Redis发布订阅：
				Redis发布订阅是一种消息通信模式：发送者发送消息，订阅者接受消息
				Redis客户端可以订阅任意数量的频道。
				订阅者
Jedis:是一个集成redis的一些操作的命令，封装了redis的Java客户端，提供连接池的使用一般不直接使用jedis，而是在其上在封装一层，作为业务的使用。如果用spring的话，可以看看spring 封装的 redis Spring Data Redis。
public interface JedisClient {
	String set(String key, String value);
	String get(String key);
	Boolean exists(String key);
	Long expire(String key, int seconds);
	Long ttl(String key);
	Long incr(String key);
	Long hset(String key, String field, String value);
	String hget(String key, String field);
	Long hdel(String key, String... field);
	Boolean hexists(String key, String field);
	List<String> hvals(String key);
	Long del(String key);
}

/**
 * 集群版
 * @author leoill
 *TODO
 *2019年1月11日
 */
public class JedisClientCluster implements JedisClient {
	
	private JedisCluster jedisCluster;
	

	public JedisCluster getJedisCluster() {
		return jedisCluster;
	}

	public void setJedisCluster(JedisCluster jedisCluster) {
		this.jedisCluster = jedisCluster;
	}

	@Override
	public String set(String key, String value) {
		return jedisCluster.set(key, value);
	}

	@Override
	public String get(String key) {
		return jedisCluster.get(key);
	}

	@Override
	public Boolean exists(String key) {
		return jedisCluster.exists(key);
	}

	@Override
	public Long expire(String key, int seconds) {
		return jedisCluster.expire(key, seconds);
	}

	@Override
	public Long ttl(String key) {
		return jedisCluster.ttl(key);
	}

	@Override
	public Long incr(String key) {
		return jedisCluster.incr(key);
	}

	@Override
	public Long hset(String key, String field, String value) {
		return jedisCluster.hset(key, field, value);
	}

	@Override
	public String hget(String key, String field) {
		return jedisCluster.hget(key, field);
	}

	@Override
	public Long hdel(String key, String... field) {
		return jedisCluster.hdel(key, field);
	}

	@Override
	public Boolean hexists(String key, String field) {
		return jedisCluster.hexists(key, field);
	}

	@Override
	public List<String> hvals(String key) {
		return jedisCluster.hvals(key);
	}

	@Override
	public Long del(String key) {
		return jedisCluster.del(key);
	}

}
package com.leo.e3mall.common.jedis;

import java.util.List;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
/**
 * 单机版
 * @author leoill
 *TODO
 *2019年1月11日
 */
public class JedisClientPool implements JedisClient {
	
	private JedisPool jedisPool;

	public JedisPool getJedisPool() {
		return jedisPool;
	}

	public void setJedisPool(JedisPool jedisPool) {
		this.jedisPool = jedisPool;
	}

	@Override
	public String set(String key, String value) {
		Jedis jedis = jedisPool.getResource();
		String result = jedis.set(key, value);
		jedis.close();
		return result;
	}

	@Override
	public String get(String key) {
		Jedis jedis = jedisPool.getResource();
		String result = jedis.get(key);
		jedis.close();
		return result;
	}

	@Override
	public Boolean exists(String key) {
		Jedis jedis = jedisPool.getResource();
		Boolean result = jedis.exists(key);
		jedis.close();
		return result;
	}

	@Override
	public Long expire(String key, int seconds) {
		Jedis jedis = jedisPool.getResource();
		Long result = jedis.expire(key, seconds);
		jedis.close();
		return result;
	}

	@Override
	public Long ttl(String key) {
		Jedis jedis = jedisPool.getResource();
		Long result = jedis.ttl(key);
		jedis.close();
		return result;
	}

	@Override
	public Long incr(String key) {
		Jedis jedis = jedisPool.getResource();
		Long result = jedis.incr(key);
		jedis.close();
		return result;
	}

	@Override
	public Long hset(String key, String field, String value) {
		Jedis jedis = jedisPool.getResource();
		Long result = jedis.hset(key, field, value);
		jedis.close();
		return result;
	}

	@Override
	public String hget(String key, String field) {
		Jedis jedis = jedisPool.getResource();
		String result = jedis.hget(key, field);
		jedis.close();
		return result;
	}

	@Override
	public Long hdel(String key, String... field) {
		Jedis jedis = jedisPool.getResource();
		Long result = jedis.hdel(key, field);
		jedis.close();
		return result;
	}

	@Override
	public Boolean hexists(String key, String field) {
		Jedis jedis = jedisPool.getResource();
		Boolean result = jedis.hexists(key, field);
		jedis.close();
		return result;
	}

	@Override
	public List<String> hvals(String key) {
		Jedis jedis = jedisPool.getResource();
		List<String> result = jedis.hvals(key);
		jedis.close();
		return result;
	}

	@Override
	public Long del(String key) {
		Jedis jedis = jedisPool.getResource();
		Long result = jedis.del(key);
		jedis.close();
		return result;
	}

}
通过spring的bean的注入然后加载redis的配置文件：
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<!-- 连接redis单机版 -->
	<bean id="jedisClientPool" class="com.leo.e3mall.common.jedis.JedisClientPool">
		<property name="jedisPool" ref="jedisPool"></property>
	</bean>
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg name="host" value="192.168.25.162"></constructor-arg>
		<constructor-arg name="port" value="6379"></constructor-arg>
	</bean>
	<!-- 连接redis集群版 -->
	<bean id="jedisClientCluster" class="com.leo.e3mall.common.jedis.JedisClientCluster">
		<property name="jedisCluster" ref="jedisCluster"></property>
	</bean>
	<bean id="jedisCluster" class="redis.clients.jedis.JedisCluster">
		<constructor-arg name="nodes">
			<set>
				<bean class="redis.clients.jedis.HostAndPort">
					<constructor-arg name="host" value="192.168.25.162"></constructor-arg>
					<constructor-arg name="port" value="7001"></constructor-arg>
				</bean>
				<bean class="redis.clients.jedis.HostAndPort">
					<constructor-arg name="host" value="192.168.25.162"></constructor-arg>
					<constructor-arg name="port" value="7002"></constructor-arg>
				</bean>
				<bean class="redis.clients.jedis.HostAndPort">
					<constructor-arg name="host" value="192.168.25.162"></constructor-arg>
					<constructor-arg name="port" value="7003"></constructor-arg>
				</bean>
				<bean class="redis.clients.jedis.HostAndPort">
					<constructor-arg name="host" value="192.168.25.162"></constructor-arg>
					<constructor-arg name="port" value="7004"></constructor-arg>
				</bean>
				<bean class="redis.clients.jedis.HostAndPort">
					<constructor-arg name="host" value="192.168.25.162"></constructor-arg>
					<constructor-arg name="port" value="7005"></constructor-arg>
				</bean>
				<bean class="redis.clients.jedis.HostAndPort">
					<constructor-arg name="host" value="192.168.25.162"></constructor-arg>
					<constructor-arg name="port" value="7006"></constructor-arg>
				</bean>
			</set>
		</constructor-arg>
	</bean>
</beans>
Redis:::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::                            :::::                               ::::::::
:::                            :::::                               ::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
关系型数据库在性能上总是存在一些这样那样的缺陷，所以大家有时候在使用传统关系型数据库时，会与具有高效存取功能的缓存系统结合使用，以提高系统的访问性能。在很多流行的缓存系统中，Redis是一个不错的选择。Redis是一种可以持久存储的缓存系统，是一个高性能的key-value数据库，它使用键-值对的方式来存储数据。
2.2.1　Redis依赖配置
需要使用Redis，可在工程的Maven配置中加入spring-boot-starter-redis依赖，如代码清单2-9所示。其中gson是用来转换Json数据格式的工具，mysql是引用了上一节的模块，这里使用2.1节定义的实体对象来存取数据，演示在Redis中的存取操作。
代码清单2-9　Redis模块的Maven依赖配置
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-redis</artifactId>
    </dependency>
    <dependency>
        <groupId>com.google.code.gson</groupId>
        <artifactId>gson</artifactId>
        <version>2.2.4</version>
    </dependency>
    <dependency>
        <groupId>springboot.db</groupId>
        <artifactId>mysql</artifactId>
        <version>${project.version}</version>
    </dependency>
</dependencies>

2.2.2　创建Redis服务类
Redis提供了下列几种数据类型可供存取：
·string；
·hash；
·list；
·set及zset。
在实例中，将使用string即字符串的类型来演示数据的存取操作。对于Redis，Spring Boot没有提供像JPA那样相应的资源库接口，所以只能仿照上一节中Repository的定义编写一个实体User的服务类，如代码清单2-10所示。这个服务类可以存取对象User以及由User组成的列表List，同时还提供了一个删除的方法。所有这些方法都是使用RedisTemplate来实现的。
代码清单2-10　用户实体的Redis服务类
@Repository
public class UserRedis {
    @Autowired
    private RedisTemplate<String, String> redisTemplate;
    public void add(String key, Long time,User user) {
        Gson gson = new Gson();
        redisTemplate.opsForValue().set(key, gson.toJson(user), time, TimeUnit.
MINUTES);
    }
    public void add(String key, Long time, List<User> users) {
        Gson gson = new Gson();
        redisTemplate.opsForValue().set(key, gson.toJson(users), time, TimeUnit.
MINUTES);
    }
    public User get(String key) {
        Gson gson = new Gson();
        User user = null;
        String userJson = redisTemplate.opsForValue().get(key);
        if(!StringUtils.isEmpty(userJson))
            user = gson.fromJson(userJson, User.class);
        return user;
    }
    public List<User> getList(String key) {
        Gson gson = new Gson();
        List<User> ts = null;
        String listJson = redisTemplate.opsForValue().get(key);
        if(!StringUtils.isEmpty(listJson))
            ts = gson.fromJson(listJson, new TypeToken<List<User>>(){}.getType());
        return ts;
    }
    public void delete(String key){
        redisTemplate.opsForValue().getOperations().delete(key);
    }
}

Redis没有表结构的概念，所以要实现MySQL数据库中表的数据（即普通Java对象映射的实体数据）在Redis中存取，必须做一些转换，使用JSON格式的文本作为Redis与Java普通对象互相交换数据的存储格式。这里使用Gson工具将类对象转换为JSON格式的文本进行存储，要取出数据时，再将JSON文本数据转化为Java对象。
因为Redis使用了key-value的方式存储数据，所以存入时要生成一个唯一的key，而要查询或者删除数据时，就可以使用这个唯一的key进行相应的操作。
保存在Redis数据库中的数据默认是永久存储的，可以指定一个时限来确定数据的生命周期，超过指定时限的数据将被Redis自动清除。在代码清单2-10中我们以分钟为单位设定了数据的存储期限。
另外，为了能正确调用RedisTemplate，必须对其进行一些初始化工作，即主要对它存取的字符串进行一个JSON格式的系列化初始配置，如代码清单2-11所示。
代码清单2-11　RedisTemplate初始化
@Configuration
public class RedisConfig {
    @Bean
    public RedisTemplate<String, String> redisTemplate(
            RedisConnectionFactory factory) {
        StringRedisTemplate template = new StringRedisTemplate(factory);
        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);
        ObjectMapper om = new ObjectMapper();
        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
        jackson2JsonRedisSerializer.setObjectMapper(om);
        template.setValueSerializer(jackson2JsonRedisSerializer);
        template.afterPropertiesSet();
        return template;
    }
}


使用缓存:
RedisTemplate实现了对Redis的调用。这种方式可以很方便地对列表对象进行系列化，在数据存取时使用Json进行格式转换。这里使用分钟作为时间单位来设定数据在Redis中保存的有效期限。
代码清单4-14　使用RedisTemplate
@Repository
public class UserRedis {
    @Autowired
    private RedisTemplate<String, String> redisTemplate;
    public void add(String key, Long time, User user) {
        Gson gson = new Gson();
        redisTemplate.opsForValue().set(key, gson.toJson(user), time, TimeUnit.
MINUTES);
    }
    public void add(String key, Long time, List<User> users) {
        Gson gson = new Gson();
        redisTemplate.opsForValue().set(key, gson.toJson(users), time, TimeUnit.
MINUTES);
    }
    public User get(String key) {
        Gson gson = new Gson();
        User user = null;
        String json = redisTemplate.opsForValue().get(key);
        if(!StringUtils.isEmpty(json))
            user = gson.fromJson(json, User.class);
        return user;
    }
    public List<User> getList(String key) {
        Gson gson = new Gson();
        List<User> ts = null;
        String listJson = redisTemplate.opsForValue().get(key);
        if(!StringUtils.isEmpty(listJson))
            ts = gson.fromJson(listJson, new TypeToken<List<User>>(){}.getType());
        return ts;
    }
    public void delete(String key){
        redisTemplate.opsForValue().getOperations().delete(key);
    }
}

然后编写如代码清单4-15所示的代码来使用Redis缓存。即在使用原来数据库的增删查改过程中，同时使用Redis进行辅助存取，以达到提升访问速度的目的，从而缓解对原来数据库的访问压力。这样，访问一条数据时，首先从Redis读取，如果存在则不再到MySQL中读取，如果不存在再到MySQL读取，并将读取的结果暂时保存在Redis中。
代码清单4-15　在数据服务中使用Redis作为辅助缓存
@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private UserRedis userRedis;
    private static final String keyHead = "mysql:get:user:";
    public User findById(Long id) {
        User user = userRedis.get(keyHead + id);
        if(user == null){
            user = userRepository.findOne(id);
            if(user != null)
                userRedis.add(keyHead + id, 30L, user);
        }
        return user;
    }
    public User create(User user) {
        User newUser = userRepository.save(user);
        if(newUser != null)
            userRedis.add(keyHead + newUser.getId(), 30L, newUser);
        return newUser;
    }
    public User update(User user) {
        if(user != null) {
            userRedis.delete(keyHead + user.getId());
            userRedis.add(keyHead + user.getId(), 30L, user);
        }
        return userRepository.save(user);
    }
    public void delete(Long id) {
        userRedis.delete(keyHead + id);
        userRepository.delete(id);
    }

上面使用Redis缓存的两种方法，可以在一个应用中混合使用。但不管怎么使用，对于控制器来说都是完全透明的，控制器对数据接口的调用还是像以前一样，它并不清楚数据接口后端是否启用了缓存，如代码清单4-16所示。
代码清单4-16　控制器使用数据接口service实现
@Autowired
    private UserService userService;
        @RequestMapping(value="/{id}")
    public String show(ModelMap model,@PathVariable Long id) {
        User user = userService.findById(id);
        model.addAttribute("user",user);
        return "user/show";
    }

使用缓存之后，大量的查询语句就从原来的数据库服务器中，转移到了高效的Redis服务器中执行，这将在很大程度上减轻原来数据库服务器的压力，并且提升查询的反应速度和效率。所以在很大的程度上，系统性能就得到了很好的改善。