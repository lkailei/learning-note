一、JavaScript回顾
	EcmaScript -- 标准化组织提供脚本核心代码,其中定义了JavaScript的基本的语法
	Dom -- W3C 提供的一套用来解读文档结构树的一套标准,目前驻留的浏览器都支持dom 
	Bom -- 各个浏览器各自定义的一些Script方法 

	Apatana
		第一种配置方式：
		1.解压Eclipse
		2.在任意目录下，推荐就在Eclipse安装目录下（注意安装目录不包含中文空格）新建一个myplugins(随便起名)文件夹，再新建一个文件夹aptana(随便起)，在apatana文件夹中创建一个文件夹eclipse(固定名字)，将aptana相关的两个文件夹features plugins 拷贝到这个目录。
		3.在eclipse安装目录下创建links文件夹，其中创建xxx.link 文件，其中书写 path=E:\\eclipse\\myplugins\\apatana 指向插件所在的eclipse目录
		重启eclipse就可以了
		
		
		第二种配置方式：
			在eclipse安装目录下的dropins文件夹中创建aptana(随意起名字)文件夹，其中创建eclipse(固定名字)文件夹，将aptana相关的两个文件夹features plugins 拷贝进来就可以了
			重启eclipse就可以了

二、Jquery
	1. dom对象 -- Jquery对象
		(1)dom对象转为jquery对象
			jquery对象是$()这样的基本形式
			想要将dom对象转换为jquery对象,只需用$(dom对象)包一下就可以了
		(2)jquery对象转为dom对象
			~1.可以向访问数组一样用[index]的方式将jquery对象转为dom对象
			~2.可以调用jquery对象的get(index)获取封装的dom对象
		
	2.选择器:利用选择器jquery可以快速的在页面中选取节点
		(1)基本选择器
			1、#id     用法: $(”#myDiv”);    返回值  单个元素的组成的集合
				说明: 这个就是直接选择html中的id=”myDiv”
			2、Element       用法: $(”div”)     返回值  集合元素
			 说明: element的英文翻译过来是”元素”,所以element其实就是html已经定义的标签元素,例如 div, input, a等等.

			3、class          用法: $(”.myClass”)      返回值  集合元素
				 说明: 这个标签是直接选择html代码中class=”myClass”的元素或元素组(因为在同一html页面中class是可以存在多个同样值的).
			4、*          用法: $(”*”)      返回值  集合元素
			 说明: 匹配所有元素,多用于结合上下文来搜索
			5、selector1, selector2, selectorN      
			用法: $(”div,span,p.myClass”)    返回值  集合元素
			说明: 将每一个选择器匹配到的元素合并后一起返回.你可以指定任意多个选择器, 并将匹配到的元素合并到一个结果内.其中p.myClass是表示匹配元素
			 p class=”myClass”
		(2)层次选择器
			1 、ancestor descendant
				用法: $(”form input”) ;   返回值  集合元素
				说明: 在给定的祖先元素下匹配所有后代元素.这个要下面讲的”parent > child”区分开.
			
			2、parent > child用法: $(”form > input”) ;    返回值  集合元素
			  说明: 在给定的父元素下匹配所有子元素.注意:要区分好后代元素与子元素
			
			3、prev + next
			      用法: $(”label + input”) ;   返回值  集合元素
			      说明: 匹配所有紧接在 prev 元素后的 next 元素
			
			4、prev ~ siblings
			      用法: $(”form ~ input”) ;    返回值  集合元素
			      说明: 匹配 prev 元素之后的所有 siblings 元素.注意:是匹配之后的元素,不包含该元素在内,并且siblings匹配的是和prev同辈的元素,其后辈元素不被匹配.
			
			5、选择所有兄弟使用siblings方法来获取
				$("#two").siblings("div").css();
	3.过滤器
		(1)基础过滤选择器
			1、:first用法: $(”tr:first”) ;   返回值  单个元素的组成的集合
			说明: 匹配找到的第一个元素
			2、:last用法: $(”tr:last”)   返回值  集合元素
			说明: 匹配找到的最后一个元素.与 :first 相对应.
			3、:not(selector)用法: $(”input:not(:checked)”)返回值  集合元素
			说明: 去除所有与给定选择器匹配的元素.有点类似于”非”,意思是没有被选中的input(当input的type=”checkbox”).
			4、:even用法: $(”tr:even”)   返回值  集合元素
			说明: 匹配所有索引值为偶数的元素，从 0 开始计数.js的数组都是从0开始计数的.例如要选择table中的行,因为是从0开始计数,所以table中的第一个tr就为偶数0.
			5、: odd用法: $(”tr:odd”) 返回值  集合元素
			说明: 匹配所有索引值为奇数的元素,和:even对应,从 0 开始计数.
			6、:eq(index)用法: $(”tr:eq(0)”)    返回值  集合元素
			说明: 匹配一个
			7、:gt(index)用法: $(”tr:gt(0)”)    返回值  集合元素
			说明: 匹配所有大于给定索引值的元素.
			8、:lt(index)用法: $(”tr:lt(2)”)    返回值  集合元素  
			      说明: 匹配所有小于给定索引值的元素.
			9、:header(固定写法)用法: $(”:header”).css(”background”, “#EEE”)    返回值  集合元素
			 说明: 匹配如 h1, h2, h3之类的标题元素.这个是专门用来获取h1,h2这样的标题元素.
			10、:animated(固定写法)   返回值  集合元素
			说明: 匹配所有正在执行动画效果的元素 
		(2)内容过滤选择器
			1、:contains(text)用法: $(”div:contains(’John’)”)    返回值  集合元素
			说明: 匹配包含给定文本的元素.这个选择器比较有用，当我们要选择的不是dom标签元素时,它就派上了用场了,它的作用是查找被标签”围”起来的文本内容是否符合指定的内容的.
			2、:empty用法: $(”td:empty”)   返回值  集合元素
			说明: 匹配所有不包含子元素或者文本的空元素
			3、:has(selector)
		      用法: $(”div:has(p)”).addClass(”test”)    返回值  集合元素
		      说明: 匹配含有选择器所匹配的元素的元素.这个解释需要好好琢磨,但是一旦看了使用的例子就完全清楚了:给所有包含p元素的div标签加上class=”test”.
			4、:parent用法: $(”td:parent”)   返回值  集合元素
			说明: 匹配含有子元素或者文本的元素.注意:这里是”:parent”,可不是”.parent”哦!感觉与上面讲的”:empty”形成反义词.

		(3)可见度过滤选择器
			1、:hidden用法: $(”tr:hidden”)  返回值  集合元素
			说明: 匹配所有的不可见元素，input 元素的 type 属性为 “hidden” 的话也会被匹配到.意思是css中display:none和input type=”hidden”的都会被匹配到.同样,要在脑海中彻底分清楚冒号”:”, 点号”.”和逗号”,”的区别.
			
			2、:visible用法: $(”tr:visible”)  返回值  集合元素
			说明: 匹配所有的可见元素.
		(4)属性过滤器
			1、[attribute]用法: $(”div[id]“) ;  返回值  集合元素
			说明: 匹配包含给定属性的元素. 例子中是选取了所有带”id”属性的div标签.
			2、[attribute=value]用法: $(”input[name='newsletter']“).attr(”checked”, true);    返回值  集合元素
			 说明: 匹配给定的属性是某个特定值的元素.例子中选取了所有 name 属性是 newsletter 的 input 元素.
			3、[attribute!=value]用法: $(”input[name!='newsletter']“).attr(”checked”, true);    返回值  集合元素
			说明: 匹配所有不含有指定的属性，或者属性不等于特定值的元素.此选择器等价于:not([attr=value]),要匹配含有特定属性但不等于特定值的元素,请使用[attr]:not([attr=value]).之前看到的 :not 派上了用场.
			4、[attribute^=value]用法: $(”input[name^=‘news’]“)  返回值  集合元素 
			  说明: 匹配给定的属性是以某些值开始的元素.,我们又见到了这几个类似于正则匹配的符号.现在想忘都忘不掉了吧?!
			5、[attribute$=value]用法: $(”input[name$=‘letter’]“)  返回值  集合元素 
			说明: 匹配给定的属性是以某些值结尾的元素.
			6、[attribute*=value]用法: $(”input[name*=‘man’]“)   返回值  集合元素
			说明: 匹配给定的属性是以包含某些值的元素.
			7、[attributeFilter1][attributeFilter2][attributeFilterN]用法: $(”input[id][name$=‘man’]“)  返回值  集合元素
			 说明: 复合属性选择器,需要同时满足多个条件时使用.又是一个组合,这种情况我们实际使用的时候很常用.这个例子中选择的是所有含有 id 属性,并且它的 name 属性是以 man 结尾的元素.
		(5)子元素过滤选择器
			1、:nth-child(index/even/odd/equation)
			用法: $(”ul li:nth-child(2)”)   返回值  集合元素
			说明: 匹配其父元素下的第N个子或奇偶元素.这个选择器和之前说的基础过滤(Basic Filters)中的 eq() 有些类似,不同的地方就是前者是从0开始,后者是从1开始.


			2、:first-child
			用法: $(”ul li:first-child”)    返回值  集合元素 
			说明: 匹配第一个子元素.’:first’ 只匹配一个元素,而此选择符将为每个父元素匹配一个子元素.这里需要特别点的记忆下区别.
			
			3、:last-child
			用法: $(”ul li:last-child”)      返回值  集合元素
			说明: 匹配最后一个子元素.’:last’只匹配一个元素,而此选择符将为每个父元素匹配一个子元素.
			
			4、: only-child
			用法: $(”ul li:only-child”)   返回值  集合元素 
			说明: 如果某个元素是父元素中唯一的子元素,那将会被匹配.如果父元素中含有其他元素,那将不会被匹配.意思就是:只有一个子元素的才会被匹配!
		(6)表单对象属性过滤选择器
			1、:enabled
			用法: $(”input:enabled”)    返回值  集合元素
			说明: 匹配所有可用元素.意思是查找所有input中不带有disabled=”disabled”的input.不为disabled,当然就为enabled啦.
			2、:disabled
			用法: $(”input:disabled”)    返回值  集合元素
			说明: 匹配所有不可用元素.与上面的那个是相对应的.
			3、:checked用法: 
			$(”input:checked”)   返回值  集合元素
			说明: 匹配所有选中的被选中元素(复选框、单选框等，不包括select中的option).这话说起来有些绕口.
			4、:selected用法: 
			$(”select option:selected”)   返回值  集合元素
			说明: 匹配所有选中的option元素.

		(7)表单选择器
			1、:input
			用法: $(”:input”) ;   返回值  集合元素
			 说明:匹配所有 input, textarea, select 和 button 元素 
			2、:text
			用法: $(”:text”) ;  返回值  集合元素
			 说明: 匹配所有的单行文本框.
			3、:password
			用法: $(”:password”) ; 返回值  集合元素
			说明: 匹配所有密码框.
			4、:radio
			用法: $(”:radio”) ; 返回值  集合元素
			说明: 匹配所有单选按钮.
			5、:checkbox
			用法: $(”:checkbox”) ; 返回值  集合元素
			 说明: 匹配所有复选框
			6、:submit用法:
			$(”:submit”) ;   返回值  集合元素
			说明: 匹配所有提交按钮.
	4.Dom操作
		(1)内部插入
			*   append(content) :向每个匹配的元素的内部的结尾处追加内容
			*   appendTo(content) :将每个匹配的元素追加到指定的元素中的内部结尾处
			*   prepend(content):向每个匹配的元素的内部的开始处插入内容
			*   prependTo(content) :将每个匹配的元素插入到指定的元素内部的开始处
		(2)外部插入
			*  after(content) :在每个匹配的元素之后插入内容 
			*  insertAfter(content):把所有匹配的元素插入到另一个、指定的元素元素集合的后面 
			*  before(content):在每个匹配的元素之前插入内容 
			*  insertBefore(content) :把所有匹配的元素插入到另一个、指定的元素元素集合的前面 
		(3)查找节点:利用选择器就可以查找节点
			如果要获取属性,attr()
		(4)创建节点:
			创建节点: 使用 jQuery 的工厂函数 $(): $(html)
		(5)删除节点:
			remove()
			empty()
		(6)克隆节点
			clone()
		(7)替换节点
			replaceWith
			replaceAll
		(8)操作属性
			attr()
		(9)样式操作
		追加样式: addClass() 
		移除样式: removeClass() --- 从匹配的元素中删除全部或指定的 class
		切换样式: toggleClass()  --- 控制样式上的重复切换.如果类名存在则删除它, 如果类名不存在则添加它.
		判断是否含有某个样式: hasClass() --- 判断元素中是否含有某个 class, 如果有, 则返回 true; 否则返回 false
		
		css()
		height()
		width()
		html()
		text()
		val()
		$(window).load(function(){}) 
		$().ready();


		(10)遍历节点
			取得匹配元素的所有子元素组成的集合: children(). 该方法只考虑子元素而不考虑任何后代元素.
			取得匹配元素后面紧邻的同辈元素的集合:next();
			取得匹配元素前面紧邻的同辈元素的集合:prev()
			取得匹配元素前后所有的同辈元素: siblings()
			parent()


二、Ajax
	同步交互/异步交互异步传输
	不用刷新页面而获取新的数据,从而局部更新页面

	1.传统方式实现ajax
		(1)获取XMlHttpRequest对象
		(2)设置监听,处理响应
		(3)开启连接
		(4)发送请求
	2.利用jquery实现ajax
		$.get()
		$.post()
	
	3.ajax返回数据的格式:xml/html/json
		json:javascript的原生格式,javascript直接可以访问其中数据
	

js原装Ajax和jquery封装后的Ajax
	同步：客户端请求到服务器，当服务器回送数据之前都是处于等待状态
		在响应期间不能操作其他动作
	异步：客户端请求服务器，无论服务器回送数据不会送客户端都可以做其他事件
		就是在响应期间可以操作其他的动作
	Ajax运行原理：
		页面请求通过Ajax引擎来实现，存在与客户端内核里的，ajax引擎会提交请求，ajax引擎接受数据了直接就触发事件
	页面发起请求，会将请求发送给浏览器内核中的Ajax引擎，
	Ajax引擎会提交请求到服务器端，
	在这段时间里，客户端可以任意进行任意操作，直到服务器端将数据返回给Ajax引擎后，
	会触发你设置的事件，从而执行自定义的js逻辑代码完成某种页面1	功能。
	


js原生Ajax技术

		
		所有的异步访问都是ajax引擎实现
	
	Ajax是XmlHttpRequest对象和javaScript,xml,css,Dom等技术的结合。
	XmlHttpRequest对象：
			初始化：
				
				IE浏览器：
				var http_request=new ActiveXObject("Msxml2.XMLHTTP");或者：var http_request=new ActiveXObject("Microsoft.XMLHTTP");
				非IE浏览器：
				var http_request=new XMLHTTPRequest();
			一般都是如下使用：
				if(window.XMLHttpRequest){
					http_request=new XMLHttpRequest();
				}else if(window.ActiveXObject){
					try{
					   http_request=new ActiveXObject("Msxml2.XMLHTTP");

					}catch(e){
						try{
						   http_request=new ActiveXObject("Microsoft.XMLHTTP");

						}catch(e){
					    }
				    }
				}
		window.ActiveXObject将返回一个对象，或者是null，null为false；

	XmlHttpRequest对象常用的方法：
		用于设置进行异步请求的URL，请求的参数信息。
		open("method","URL"[,asyncFlag[,"username"[,",password"]]]);
			asyncFlag:可选参数，异步为true，同步为false，默认异步；
		     例如：http_request.open("GET","reqist.jsp",true);
		send();
		send 用于向服务器发送请求，异步立即返回，否者等接受到相应为准，
		     例如：send(content);content为制定的数据可以为Dom，输入流，字符串，没有参数就为null;
		sendRequestHeader("header","value")方法；
		     header:为Http的头，value 为http头的值；
		请求头：
			Accept: text/html,image/*    客户端可以接受的数据类型
			Accept-Charset: ISO-8859-1	客户端接受数据需要使用的字符集编码
			Accept-Encoding: gzip,compress 客户端可以接受的数据压缩格式
			Accept-Language: en-us,zh-cn  可接受的语言环境
			Host: www.it315.org:80 想要访问的虚拟主机名
			If-Modified-Since: Tue, 11 Jul 2000 18:23:51 GMT 这是和缓存相关的一个头，带着缓存资源的最后获取时间
			Referer: http://www.it315.org/index.jsp 这个头表示当前的请求来自哪个链接，这个头和防盗链的功能相关
			User-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0) 客户端的一些基本信息
			Cookie 会在后面讲会话技术的时候单讲
			Connection: close/Keep-Alive 指定是否继续保持连接
			Date: Tue, 11 Jul 2000 18:23:51 GMT 当前时间
		abort()方法：
			用于停止或放弃当前的异步请求，
		getRequestHeader()方法：获取Http头信息
			getRequestHeader("headerLabel");
		getAllRequestHeaders()方法：获取Http完整的头信息
	XmlHttpRequest常用的属性：
		1.onreadystatechange属性：
			用于指定状态改变时所触发事件处理器，通常会调用JavaScript函数；
		    例如：http_request.onreadystatechange=function(){
		    
		    };
		 2.readyState属性：获取请求状态：
			0：未初始化，1：正在加载，2:已加载，3：交互中，4：完成。
		 3.responseText属性：获取响应的字符串
		 4.responseXML属性：获取服务器的响应的xml可以解析为dom对象
		 5.status返回状态码：200成功；202：请求接受但为成功，400：错误的请求，404 500
		 6.statusText返回HTTP状态码对应得文本，如ok notFound；

	发送请求：
	Ajax通过XMLHttpRequest对象，实现异步发送请求，步骤：
		1.初始化xmlHttpRequest对象，new 
		2.为xmlHttprequest指定一个返回结果的处理函数，.onreadystatechange=function(){}
		3.创建一个与服务器的连接，在创建时需要指定请求方式，是否异步:open()
		4.向服务器发送请求，.send()：get请求：.send(null);
		post请求：var param="user="+form1.user.value+"&pwd="+form1.pwd.value+"&email="+form1.email.value;
		 在发送请求需要正确的设置请求头：
		http_request.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
			 http_request.send(param);
	处理响应：
		发送请求后接下来就是处理服务器的响应，处理响应的属性有：responseTest属性，responseXml属性
		1.处理字符串的
		   function getResult(){
			if(http_request.readyState==4){
			    if(http_request.status==200){
				alter(http_request.responseText);
			    }else{
				alert(你请求的页面有误);
			    }
			
			}
		   
		   }
		2.处理xml
			和处理dom对象才差不多，只是需要有条件判断

			function getresult(){
				if(Http_request.readyState==4){
					if(Http_request.status==200){
					 var xmldoc=http_request.responseXml;
					 var str="";
					 for(i=0;i<xmldoc.getElementsByTagName("book").length;i++){
					 	var book=xmldoc.getElementsByTagName("book").item(i);
						str+="《+"book.getElementsByTagName("title")[0].firstChild.data+"》由”"+book.getElementByTagName("publisher")[0].firstChild.data+"";

					 }
					document.getElmentById("book").innerHTML=str;
					}else{
					alert ("你请求的页面有误");
					}
				}
			
			}
		<div id="book"></div>
js原生的Ajax的使用：




json数据格式：
	json是一种与语言无关的数据交换的格式，作用：
	使用ajax进行前后台数据交换
	移动端与服务端的数据交换
	json是一种与语言无关数据交换的格式，
	使用ajax进行前后台交换，
	移动端与服务端数据交换
1.json的格式：
	对象形式：
		{"key":"obj"}
		例如：
		user对象：
			{"username":"zan","age":"28","password:"123"}
			对象嵌套对象
			{"username":"zan","age":"28","password:"123","account":{"money":"2000","time":""}}
	数组形式：
		就是包含很多对象
	[{"username":"zan"},{"age":"28"},{},{}]
	对象形式和数组形式可以互相嵌套
	jsno的可以可以为字符串也可以是对象
2．Json的转换插件

		将java的对象或集合转成json形式字符串

		json的转换插件是通过java的一些工具，直接将java对象或集合转换成json字符串。
		常用的json转换工具有如下几种：
		1）jsonlib
		2）Gson：google
		3）fastjson：阿里巴巴
Jquery的Ajax技术（重点）
		jquery是一个优秀的js框架，自然对js原生的ajax进行了封装，封装后的ajax的操作方法更简洁，功能更强大，
		与ajax操作相关的jquery方法有如下几种，但开发中经常使用的有三种
		
		1）$.get(url, [data], [callback], [type])
		2）$.post(url, [data], [callback], [type])

		其中：
		url：代表请求的服务器端地址
		data：代表请求服务器端的数据（可以是key=value形式也可以是json格式）
		callback：表示服务器端成功响应所触发的函数（只有正常成功返回才执行）
		type：表示服务器端返回的数据类型（jquery会根据指定的类型自动类型转换）
		常用的返回类型：text、json、html等

		3）$.ajax( { option1:value1,option2:value2... } ); ---- 以后在掌握
		常用的option有如下：
		async：是否异步，默认是true代表异步
		data：发送到服务器的参数，建议使用json格式
		dataType：服务器端返回的数据类型，常用text和json
		success：成功响应执行的函数，对应的类型是function类型
		type：请求方式，POST/GET
		url：请求服务器端地址

